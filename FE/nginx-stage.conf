user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       4000;
        listen  [::]:4000;
        server_name  localhost;

        location /sitemap.xml {
            proxy_pass https://srm-staging-api.whiletrue.industries/sitemap;
            proxy_set_header Host srm-staging-api.whiletrue.industries;


            proxy_ssl_server_name on;
            proxy_ssl_protocols TLSv1.2 TLSv1.3;
            proxy_ssl_ciphers HIGH:!aNULL:!MD5;
        }


           #########################
        # React SPA fallback
        #########################
        location / {
            root   /usr/share/nginx/html;
            index  index.html;

            # Redirecting query parameters to route parameters
            rewrite_by_lua_block {
                local args = ngx.req.get_uri_args()
                local parts = {}

                -- Build /key/value segments from query parameters
                for k, v in pairs(args) do
                    if v and v ~= "" then
                        table.insert(parts, k)
                        table.insert(parts, v)
                    end
                end

                if #parts > 0 then
                    local new_path = "/" .. table.concat(parts, "/") .. "/"
                    return ngx.redirect(new_path, 301)
                end
            }

            # Always fallback to index.html for React Router
            try_files $uri /index.html;

            # Disable caching for app shell
            add_header Cache-Control "no-cache, must-revalidate, proxy-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;

            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'x-request-id,Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Max-Age' 1728000;

            if ($request_method = 'OPTIONS') {
               return 204;
            }
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
